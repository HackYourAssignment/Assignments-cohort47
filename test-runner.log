2024-03-27 12:15:52 info: ---------------------------------------
2024-03-27 12:15:52 info: >>> Running Unit Test `ex1-johnWho` <<<
2024-03-27 12:15:52 info: ---------------------------------------
2024-03-27 12:15:59 info: All unit tests passed.
2024-03-27 12:16:07 info: All steps were completed successfully
2024-03-27 12:22:03 info: ---------------------------------------
2024-03-27 12:22:03 info: >>> Running Unit Test `ex1-johnWho` <<<
2024-03-27 12:22:03 info: ---------------------------------------
2024-03-27 12:22:11 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    ✕ should exist and be executable (2 ms)
    ✓ should have all TODO comments removed (1 ms)
    ✓ `getAnonName` should not contain unneeded console.log calls (1 ms)
    ✕ should call `new Promise()` (1 ms)
    ✕ should take a single argument (3 ms)
    ✕ `resolve()` should be called with a one argument
    ✕ `reject()` should be called with a one argument (1 ms)
    ✕ should resolve when called with a string argument
    ✕ should reject with an Error object when called without an argument (1 ms)

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      46 |
      47 |   test('should exist and be executable', () => {
    > 48 |     expect(exported).toBeDefined();
         |                      ^
      49 |   });
      50 |
      51 |   testTodosRemoved(() => source);

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:48:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      54 |
      55 |   test('should call `new Promise()`', () => {
    > 56 |     expect(state.newPromise).toBeDefined();
         |                              ^
      57 |   });
      58 |
      59 |   test('should take a single argument', () => {

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:56:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      58 |
      59 |   test('should take a single argument', () => {
    > 60 |     expect(state.paramCount).toBe(1);
         |                              ^
      61 |   });
      62 |
      63 |   test('`resolve()` should be called with a one argument', () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:60:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      62 |
      63 |   test('`resolve()` should be called with a one argument', () => {
    > 64 |     expect(state.resolve).toBe(1);
         |                           ^
      65 |   });
      66 |
      67 |   test('`reject()` should be called with a one argument', () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:64:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      66 |
      67 |   test('`reject()` should be called with a one argument', () => {
    > 68 |     expect(state.reject).toBe(1);
         |                          ^
      69 |   });
      70 |
      71 |   test('should resolve when called with a string argument', async () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      71 |   test('should resolve when called with a string argument', async () => {
      72 |     expect.assertions(3);
    > 73 |     expect(exported).toBeDefined();
         |                      ^
      74 |     const timeoutSpy = jest
      75 |       .spyOn(global, 'setTimeout')
      76 |       .mockImplementation((cb) => cb());

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:73:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      70 |
      71 |   test('should resolve when called with a string argument', async () => {
    > 72 |     expect.assertions(3);
         |            ^
      73 |     expect(exported).toBeDefined();
      74 |     const timeoutSpy = jest
      75 |       .spyOn(global, 'setTimeout')

      at Object.assertions (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:72:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      83 |   test('should reject with an Error object when called without an argument', async () => {
      84 |     expect.assertions(3);
    > 85 |     expect(exported).toBeDefined();
         |                      ^
      86 |     const timeoutSpy = jest
      87 |       .spyOn(global, 'setTimeout')
      88 |       .mockImplementation((cb) => cb());

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:85:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      82 |
      83 |   test('should reject with an Error object when called without an argument', async () => {
    > 84 |     expect.assertions(3);
         |            ^
      85 |     expect(exported).toBeDefined();
      86 |     const timeoutSpy = jest
      87 |       .spyOn(global, 'setTimeout')

      at Object.assertions (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:84:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        1.496 s, estimated 2 s
Ran all test suites matching /ex1-johnWho.test.js/i.
2024-03-27 12:22:18 error: *** ESLint Report ***

ex1-johnWho.js
  40:1  error  Parsing error: Unexpected token }

✖ 1 problem (1 error, 0 warnings)


2024-03-27 12:23:22 info: Disclaimer turned off
2024-03-27 12:23:35 info: ---------------------------------------
2024-03-27 12:23:35 info: >>> Running Unit Test `ex1-johnWho` <<<
2024-03-27 12:23:35 info: ---------------------------------------
2024-03-27 12:23:43 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    ✕ should exist and be executable (3 ms)
    ✓ should have all TODO comments removed (1 ms)
    ✓ `getAnonName` should not contain unneeded console.log calls
    ✕ should call `new Promise()`
    ✕ should take a single argument (2 ms)
    ✕ `resolve()` should be called with a one argument
    ✕ `reject()` should be called with a one argument
    ✕ should resolve when called with a string argument
    ✕ should reject with an Error object when called without an argument

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      46 |
      47 |   test('should exist and be executable', () => {
    > 48 |     expect(exported).toBeDefined();
         |                      ^
      49 |   });
      50 |
      51 |   testTodosRemoved(() => source);

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:48:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      54 |
      55 |   test('should call `new Promise()`', () => {
    > 56 |     expect(state.newPromise).toBeDefined();
         |                              ^
      57 |   });
      58 |
      59 |   test('should take a single argument', () => {

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:56:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      58 |
      59 |   test('should take a single argument', () => {
    > 60 |     expect(state.paramCount).toBe(1);
         |                              ^
      61 |   });
      62 |
      63 |   test('`resolve()` should be called with a one argument', () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:60:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      62 |
      63 |   test('`resolve()` should be called with a one argument', () => {
    > 64 |     expect(state.resolve).toBe(1);
         |                           ^
      65 |   });
      66 |
      67 |   test('`reject()` should be called with a one argument', () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:64:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      66 |
      67 |   test('`reject()` should be called with a one argument', () => {
    > 68 |     expect(state.reject).toBe(1);
         |                          ^
      69 |   });
      70 |
      71 |   test('should resolve when called with a string argument', async () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      71 |   test('should resolve when called with a string argument', async () => {
      72 |     expect.assertions(3);
    > 73 |     expect(exported).toBeDefined();
         |                      ^
      74 |     const timeoutSpy = jest
      75 |       .spyOn(global, 'setTimeout')
      76 |       .mockImplementation((cb) => cb());

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:73:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      70 |
      71 |   test('should resolve when called with a string argument', async () => {
    > 72 |     expect.assertions(3);
         |            ^
      73 |     expect(exported).toBeDefined();
      74 |     const timeoutSpy = jest
      75 |       .spyOn(global, 'setTimeout')

      at Object.assertions (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:72:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      83 |   test('should reject with an Error object when called without an argument', async () => {
      84 |     expect.assertions(3);
    > 85 |     expect(exported).toBeDefined();
         |                      ^
      86 |     const timeoutSpy = jest
      87 |       .spyOn(global, 'setTimeout')
      88 |       .mockImplementation((cb) => cb());

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:85:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      82 |
      83 |   test('should reject with an Error object when called without an argument', async () => {
    > 84 |     expect.assertions(3);
         |            ^
      85 |     expect(exported).toBeDefined();
      86 |     const timeoutSpy = jest
      87 |       .spyOn(global, 'setTimeout')

      at Object.assertions (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:84:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        1.415 s, estimated 2 s
Ran all test suites matching /ex1-johnWho.test.js/i.
2024-03-27 12:23:49 error: *** ESLint Report ***

ex1-johnWho.js
  41:1  error  Parsing error: Unexpected token }

✖ 1 problem (1 error, 0 warnings)


2024-03-27 12:24:41 info: ---------------------------------------
2024-03-27 12:24:41 info: >>> Running Unit Test `ex1-johnWho` <<<
2024-03-27 12:24:41 info: ---------------------------------------
2024-03-27 12:24:49 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    ✕ should exist and be executable (3 ms)
    ✓ should have all TODO comments removed
    ✓ `getAnonName` should not contain unneeded console.log calls
    ✕ should call `new Promise()` (1 ms)
    ✕ should take a single argument (1 ms)
    ✕ `resolve()` should be called with a one argument (1 ms)
    ✕ `reject()` should be called with a one argument (1 ms)
    ✕ should resolve when called with a string argument (21 ms)
    ✕ should reject with an Error object when called without an argument (1 ms)

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      46 |
      47 |   test('should exist and be executable', () => {
    > 48 |     expect(exported).toBeDefined();
         |                      ^
      49 |   });
      50 |
      51 |   testTodosRemoved(() => source);

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:48:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      54 |
      55 |   test('should call `new Promise()`', () => {
    > 56 |     expect(state.newPromise).toBeDefined();
         |                              ^
      57 |   });
      58 |
      59 |   test('should take a single argument', () => {

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:56:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      58 |
      59 |   test('should take a single argument', () => {
    > 60 |     expect(state.paramCount).toBe(1);
         |                              ^
      61 |   });
      62 |
      63 |   test('`resolve()` should be called with a one argument', () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:60:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      62 |
      63 |   test('`resolve()` should be called with a one argument', () => {
    > 64 |     expect(state.resolve).toBe(1);
         |                           ^
      65 |   });
      66 |
      67 |   test('`reject()` should be called with a one argument', () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:64:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      66 |
      67 |   test('`reject()` should be called with a one argument', () => {
    > 68 |     expect(state.reject).toBe(1);
         |                          ^
      69 |   });
      70 |
      71 |   test('should resolve when called with a string argument', async () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      71 |   test('should resolve when called with a string argument', async () => {
      72 |     expect.assertions(3);
    > 73 |     expect(exported).toBeDefined();
         |                      ^
      74 |     const timeoutSpy = jest
      75 |       .spyOn(global, 'setTimeout')
      76 |       .mockImplementation((cb) => cb());

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:73:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      70 |
      71 |   test('should resolve when called with a string argument', async () => {
    > 72 |     expect.assertions(3);
         |            ^
      73 |     expect(exported).toBeDefined();
      74 |     const timeoutSpy = jest
      75 |       .spyOn(global, 'setTimeout')

      at Object.assertions (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:72:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      83 |   test('should reject with an Error object when called without an argument', async () => {
      84 |     expect.assertions(3);
    > 85 |     expect(exported).toBeDefined();
         |                      ^
      86 |     const timeoutSpy = jest
      87 |       .spyOn(global, 'setTimeout')
      88 |       .mockImplementation((cb) => cb());

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:85:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      82 |
      83 |   test('should reject with an Error object when called without an argument', async () => {
    > 84 |     expect.assertions(3);
         |            ^
      85 |     expect(exported).toBeDefined();
      86 |     const timeoutSpy = jest
      87 |       .spyOn(global, 'setTimeout')

      at Object.assertions (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:84:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        1.545 s, estimated 2 s
Ran all test suites matching /ex1-johnWho.test.js/i.
2024-03-27 12:24:55 error: *** ESLint Report ***

ex1-johnWho.js
  41:1  error  Parsing error: Unexpected token }

✖ 1 problem (1 error, 0 warnings)


2024-03-27 12:25:12 info: ---------------------------------------
2024-03-27 12:25:12 info: >>> Running Unit Test `ex1-johnWho` <<<
2024-03-27 12:25:12 info: ---------------------------------------
2024-03-27 12:25:17 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    ✕ should exist and be executable (2 ms)
    ✓ should have all TODO comments removed (1 ms)
    ✓ `getAnonName` should not contain unneeded console.log calls
    ✕ should call `new Promise()`
    ✕ should take a single argument (2 ms)
    ✕ `resolve()` should be called with a one argument (1 ms)
    ✕ `reject()` should be called with a one argument (1 ms)
    ✕ should resolve when called with a string argument
    ✕ should reject with an Error object when called without an argument (1 ms)

  ● getAnonName › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      46 |
      47 |   test('should exist and be executable', () => {
    > 48 |     expect(exported).toBeDefined();
         |                      ^
      49 |   });
      50 |
      51 |   testTodosRemoved(() => source);

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:48:22)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      54 |
      55 |   test('should call `new Promise()`', () => {
    > 56 |     expect(state.newPromise).toBeDefined();
         |                              ^
      57 |   });
      58 |
      59 |   test('should take a single argument', () => {

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:56:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      58 |
      59 |   test('should take a single argument', () => {
    > 60 |     expect(state.paramCount).toBe(1);
         |                              ^
      61 |   });
      62 |
      63 |   test('`resolve()` should be called with a one argument', () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:60:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      62 |
      63 |   test('`resolve()` should be called with a one argument', () => {
    > 64 |     expect(state.resolve).toBe(1);
         |                           ^
      65 |   });
      66 |
      67 |   test('`reject()` should be called with a one argument', () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:64:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      66 |
      67 |   test('`reject()` should be called with a one argument', () => {
    > 68 |     expect(state.reject).toBe(1);
         |                          ^
      69 |   });
      70 |
      71 |   test('should resolve when called with a string argument', async () => {

      at Object.toBe (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:68:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeDefined()

    Received: undefined

      71 |   test('should resolve when called with a string argument', async () => {
      72 |     expect.assertions(3);
    > 73 |     expect(exported).toBeDefined();
         |                      ^
      74 |     const timeoutSpy = jest
      75 |       .spyOn(global, 'setTimeout')
      76 |       .mockImplementation((cb) => cb());

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:73:22)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      70 |
      71 |   test('should resolve when called with a string argument', async () => {
    > 72 |     expect.assertions(3);
         |            ^
      73 |     expect(exported).toBeDefined();
      74 |     const timeoutSpy = jest
      75 |       .spyOn(global, 'setTimeout')

      at Object.assertions (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:72:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeDefined()

    Received: undefined

      83 |   test('should reject with an Error object when called without an argument', async () => {
      84 |     expect.assertions(3);
    > 85 |     expect(exported).toBeDefined();
         |                      ^
      86 |     const timeoutSpy = jest
      87 |       .spyOn(global, 'setTimeout')
      88 |       .mockImplementation((cb) => cb());

      at Object.toBeDefined (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:85:22)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      82 |
      83 |   test('should reject with an Error object when called without an argument', async () => {
    > 84 |     expect.assertions(3);
         |            ^
      85 |     expect(exported).toBeDefined();
      86 |     const timeoutSpy = jest
      87 |       .spyOn(global, 'setTimeout')

      at Object.assertions (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:84:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        1.428 s, estimated 2 s
Ran all test suites matching /ex1-johnWho.test.js/i.
2024-03-27 12:25:21 error: *** ESLint Report ***

ex1-johnWho.js
  39:1  error  Parsing error: Unexpected token }

✖ 1 problem (1 error, 0 warnings)


2024-03-27 12:25:51 info: ---------------------------------------
2024-03-27 12:25:51 info: >>> Running Unit Test `ex1-johnWho` <<<
2024-03-27 12:25:51 info: ---------------------------------------
2024-03-27 12:25:55 info: All unit tests passed.
2024-03-27 12:25:59 error: *** ESLint Report ***

ex1-johnWho.js
  26:1  warning  Remove commented-out code  hyf/no-commented-out-code

✖ 1 problem (0 errors, 1 warning)


2024-03-27 12:31:04 info: ---------------------------------------
2024-03-27 12:31:04 info: >>> Running Unit Test `ex3-rollDie` <<<
2024-03-27 12:31:04 info: ---------------------------------------
2024-03-27 12:31:11 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDie.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDie.test.js
  rollDie
    ✓ should exist and be executable (2 ms)
    ✕ should have all TODO comments removed (2 ms)
    ✓ should call `new Promise()` (1 ms)
    ✓ `resolve()` should be called with a one argument (1 ms)
    ✓ `reject()` should be called with a one argument
    ✓ should resolve when the die settles successfully (1 ms)
    ✓ should reject with an Error when the die rolls off the table (2 ms)

  ● rollDie › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      103 | function testTodosRemoved(getSource) {
      104 |   test('should have all TODO comments removed', () => {
    > 105 |     expect(/\bTODO\b/.test(getSource())).toBeFalsy();
          |                                          ^
      106 |   });
      107 | }
      108 |

      at Object.toBeFalsy (test-runner/unit-test-helpers.js:105:42)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 6 passed, 7 total
Snapshots:   0 total
Time:        1.331 s
Ran all test suites matching /ex3-rollDie.test.js/i.
2024-03-27 12:32:03 info: ---------------------------------------
2024-03-27 12:32:03 info: >>> Running Unit Test `ex3-rollDie` <<<
2024-03-27 12:32:03 info: ---------------------------------------
2024-03-27 12:32:05 info: All unit tests passed.
2024-03-27 12:32:10 info: All steps were completed successfully
2024-03-27 12:44:45 info: --------------------------------------------
2024-03-27 12:44:45 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2024-03-27 12:44:45 info: --------------------------------------------
2024-03-27 12:44:53 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/hackyourfuture/Assignments-cohort47/3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:2
    import { simple } from 'acorn-walk';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1678:14)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        1.26 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.
2024-03-27 12:44:59 error: *** ESLint Report ***

ex4-pokerDiceAll.js
  28:1  error  'results' is not defined  no-undef

✖ 1 problem (1 error, 0 warnings)


2024-03-27 12:45:54 info: --------------------------------------------
2024-03-27 12:45:54 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2024-03-27 12:45:54 info: --------------------------------------------
2024-03-27 12:45:59 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/hackyourfuture/Assignments-cohort47/3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:2
    import { simple } from 'acorn-walk';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1678:14)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        0.979 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.
2024-03-27 12:46:43 info: --------------------------------------------
2024-03-27 12:46:43 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2024-03-27 12:46:43 info: --------------------------------------------
2024-03-27 12:46:45 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/hackyourfuture/Assignments-cohort47/3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:2
    import { simple } from 'acorn-walk';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1678:14)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        0.485 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.
2024-03-27 12:51:04 info: --------------------------------------------
2024-03-27 12:51:04 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2024-03-27 12:51:04 info: --------------------------------------------
2024-03-27 12:51:12 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/hackyourfuture/Assignments-cohort47/3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:2
    import { simple } from 'acorn-walk';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1678:14)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        0.983 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.
2024-03-27 12:54:03 info: --------------------------------------------
2024-03-27 12:54:03 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2024-03-27 12:54:03 info: --------------------------------------------
2024-03-27 12:54:10 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/hackyourfuture/Assignments-cohort47/3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:2
    import { simple } from 'acorn-walk';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1678:14)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        0.971 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.
2024-03-27 12:57:18 info: --------------------------------------------
2024-03-27 12:57:18 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2024-03-27 12:57:18 info: --------------------------------------------
2024-03-27 12:57:26 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/hackyourfuture/Assignments-cohort47/3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:2
    import { simple } from 'acorn-walk';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1678:14)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        1.04 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.
2024-03-27 01:06:44 info: ---------------------------------------
2024-03-27 01:06:44 info: >>> Running Unit Test `ex1-johnWho` <<<
2024-03-27 01:06:44 info: ---------------------------------------
2024-03-27 01:06:52 info: All unit tests passed.
2024-03-27 01:06:58 error: *** ESLint Report ***

ex1-johnWho.js
  26:1  warning  Remove commented-out code  hyf/no-commented-out-code

✖ 1 problem (0 errors, 1 warning)


2024-03-27 01:07:42 info: -------------------------------------------------
2024-03-27 01:07:42 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2024-03-27 01:07:42 info: -------------------------------------------------
2024-03-27 01:07:47 info: All unit tests passed.
2024-03-27 01:07:55 info: All steps were completed successfully
2024-03-27 01:08:43 info: --------------------------------------------
2024-03-27 01:08:43 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2024-03-27 01:08:43 info: --------------------------------------------
2024-03-27 01:08:49 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/hackyourfuture/Assignments-cohort47/3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:2
    import { simple } from 'acorn-walk';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1678:14)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        0.998 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.
2024-03-27 01:09:50 info: --------------------------------------------
2024-03-27 01:09:50 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2024-03-27 01:09:50 info: --------------------------------------------
2024-03-27 01:09:56 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /Users/hackyourfuture/Assignments-cohort47/3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:3
    import { beforeAllHelper, testTodosRemoved, testNoConsoleLog } from '../../../test-runner/unit-test-helpers';
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1678:14)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        1.202 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.
2024-03-27 01:12:24 info: --------------------------------------------
2024-03-27 01:12:24 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2024-03-27 01:12:24 info: --------------------------------------------
2024-03-27 01:12:32 info: All unit tests passed.
2024-03-27 01:12:42 info: All steps were completed successfully
2024-03-27 02:17:02 info: ----------------------------------------------
2024-03-27 02:17:02 info: >>> Running Unit Test `ex5-pokerDiceChain` <<<
2024-03-27 02:17:02 info: ----------------------------------------------
2024-03-27 02:17:08 error: *** Unit Test Error Report ***

Command failed: npx jest ex5-pokerDiceChain.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex5-pokerDiceChain.test.js
  ex5-pokerDiceChain
    ✓ should exist and be executable (2 ms)
    ✓ should have all TODO comments removed (1 ms)
    ✓ `rollDice` should not contain unneeded console.log calls (2 ms)
    ✕ should resolve when all dice settle successfully (2 ms)
    ✓ should reject with an Error when a die rolls off the table (1 ms)

  ● ex5-pokerDiceChain › should resolve when all dice settle successfully

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Promise

    Received value has no prototype
    Received value: undefined

      30 |
      31 |     const promise = rollDice();
    > 32 |     expect(promise).toBeInstanceOf(Promise);
         |                     ^
      33 |     const result = await promise;
      34 |     expect(Array.isArray(result)).toBe(true);
      35 |     expect(result).toHaveLength(5);

      at Object.toBeInstanceOf (3-UsingAPIs/Week1/unit-tests/ex5-pokerDiceChain.test.js:32:21)

  ● ex5-pokerDiceChain › should resolve when all dice settle successfully

    expect.assertions(4)

    Expected four assertions to be called but received two assertion calls.

      24 |
      25 |   test('should resolve when all dice settle successfully', async () => {
    > 26 |     expect.assertions(4);
         |            ^
      27 |     expect(exported).toBeDefined();
      28 |
      29 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.assertions (3-UsingAPIs/Week1/unit-tests/ex5-pokerDiceChain.test.js:26:12)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 4 passed, 5 total
Snapshots:   0 total
Time:        1.372 s
Ran all test suites matching /ex5-pokerDiceChain.test.js/i.
2024-03-27 02:17:13 error: *** ESLint Report ***

ex5-pokerDiceChain.js
  20:12  error  'rollAndPush' is defined but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2024-03-27 02:19:16 info: ----------------------------------------------
2024-03-27 02:19:16 info: >>> Running Unit Test `ex5-pokerDiceChain` <<<
2024-03-27 02:19:16 info: ----------------------------------------------
2024-03-27 02:19:24 info: All unit tests passed.
2024-03-27 02:19:36 info: All steps were completed successfully
2024-03-27 02:19:57 info: ---------------------------------------
2024-03-27 02:19:57 info: >>> Running Unit Test `ex1-johnWho` <<<
2024-03-27 02:19:57 info: ---------------------------------------
2024-03-27 02:20:01 info: All unit tests passed.
2024-03-27 02:20:05 error: *** ESLint Report ***

ex1-johnWho.js
  26:1  warning  Remove commented-out code  hyf/no-commented-out-code

✖ 1 problem (0 errors, 1 warning)


2024-03-27 02:20:59 info: ---------------------------------------
2024-03-27 02:20:59 info: >>> Running Unit Test `ex1-johnWho` <<<
2024-03-27 02:20:59 info: ---------------------------------------
2024-03-27 02:21:05 info: All unit tests passed.
2024-03-27 02:21:12 info: All steps were completed successfully
